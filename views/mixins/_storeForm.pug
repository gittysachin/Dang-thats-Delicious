mixin storeForm( store = {} )
	//- p It works! #{store.name}
	form(action=`/add/${store._id || ''}` method="POST" class="card" enctype="multipart/form-data")
		//- pre= h.dump(store)
		label(for="name") Name
		input(type="text" name="name" value=store.name)
		label(for="description") Description
		textarea(name="description")= store.description
		//- upload photo
		label(for="photo") Photo
			input(type="file" name="photo" id="photo" accept="image/gif, image/png, image/jpeg")
			if store.photo
				img(src=`/uploads/${store.photo}`, alt=store.name width=200)
		//- address, lng and lat
		label(for="address") Address
		input(type="text" id="address" name="location[address]" value=(store.location && store.location.address))
		label(for="lng") Address Lng 
		input(type="text" id="lng" name="location[coordinates][0]" value=(store.location && store.location.coordinates[0]) required)
		label(for="lat") Address Lat 
		input(type="text" id="lat" name="location[coordinates][1]" value=(store.location && store.location.coordinates[1]) required)
		br()
		//- here location[address] --> in urlEncoded--> extended : true allows us to use inputs that sort of have nested data in them
		- const choices = ['Wifi', 'Open Lane', 'Family Friendly', 'Vegetarian', 'Licenced']
		- const tags = store.tags || []
		ul.tags
			each choice in choices 
				.tag.tag__choice
					input(type="checkbox" id=choice value=choice name="tags" checked=(tags.includes(choice)))
					label(for=choice) #{choice}
		input(type="submit" class="button" value="Save â†’")